apply plugin: 'com.android.application'

def versionMajor = 1;
def versionMinor = 0;
def versionPatch = 0;
def versionBuild = 0;


def getDate() {
    def date = new Date()
    def formattedDate = date.format('MMdd')
    return formattedDate
};

// 设置编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    // 默认的文件配置
    defaultConfig {
        applicationId "com.android.gradlecourse"
        minSdkVersion 15
        targetSdkVersion 22
        // 版本名称
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        // 版本号
        versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionBuild

        buildConfigField "boolean", "DEBUG_MODEL", "false"
        // 字符串类型
        buildConfigField "String", "FOO", "\"defaultConfig\""
        // 增加资源文件的属性值
        resValue "string", "gradle_app_name", "gradle_default"
    }
    // 构建时,忽略lint检查
    lintOptions {
        abortOnError false
    }
    //为不同的buildTypes配置签名
    signingConfigs {
        //release的keystore信息
        release {
            storeFile file('E:/WorkSpace/GradleCourse/GradleCourse/KeyStore/KeyStore.jks')
            storePassword "zoruyg"
            keyAlias "baofeng"
            keyPassword "zoruyg"
        }
        debug {
            storeFile file('E:/WorkSpace/GradleCourse/GradleCourse/KeyStore/KeyStore_Debug.jks')
            storePassword "zoruyg"
            keyAlias "baofeng"
            keyPassword "zoruyg"
        }
    }
    buildTypes {
        release {
            // 文件对齐压缩
            zipAlignEnabled true
            // 移除未使用的资源
//            shrinkResources true
            // 调用签名文件
            signingConfig signingConfigs.release
            // 是否使用混淆文件
            minifyEnabled true
            // 指定混淆文件的路径
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 为该类型设置属性值
            buildConfigField "boolean", "DEBUG_MODEL", "false"
            // 字符串类型
            buildConfigField "String", "FOO", "\"release\""
            // 增加资源文件的属性值
            resValue "string", "gradle_app_name", "gradle_release"
        }
        debug {
            debuggable true
            jniDebuggable false
            signingConfig signingConfigs.debug
            renderscriptDebuggable false
            renderscriptOptimLevel 3
            minifyEnabled false
            pseudoLocalesEnabled true
            applicationIdSuffix '.debug'
            versionNameSuffix '.debug'
            zipAlignEnabled false
            // 字符串类型
            buildConfigField "String", "FOO", "\"debug\""
            // 增加资源文件的属性值
            resValue "string", "gradle_app_name", "gradle_debug"
        }
    }
//    dexOptions {
//        // 是否进行多dex打包,可以解决6万方法问题
//        incremental true
//    }
    compileOptions {
        // 配置jdk版本
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
        channal {
            // 对占位符进行替换
            manifestPlaceholders = [umeng_channel: "channal", baidu_channel: "channal1"]
        }
        baidu {
            // 对占位符进行替换
            manifestPlaceholders = [umeng_channel: "baidu", baidu_channel: "baidu1"]
        }
    }

    // 为代码指定路径
    sourceSets {
        main {
//        manifest.srcFile 'AndroidManifest.xml'
//        java.srcDirs = ['src']
//        resources.srcDirs = ['src']
//        aidl.srcDirs = ['src']
//        renderscript.srcDirs = ['src']
//        res.srcDirs = ['res']
//        assets.srcDirs = ['assets']
//            http://stackoverflow.com/questions/22985384/runtime-noclassdeffounderror-exception-when-importing-from-eclipse-to-android-st/23059913#23059913
//            http://stackoverflow.com/questions/21096819/jni-and-gradle-in-android-studio/21111458#21111458
//            jniLibs.srcDirs = ['libs']  //不可行
            //配置.so文件调用
            jni.srcDirs = []
            jniLibs.srcDir 'libs'
        }

    }
}


dependencies {
    // 依赖libs下面的jar
    compile fileTree(include: '*.jar', dir: 'libs')

    // 远程依赖json,格式: groupId:artifactId:version
    compile 'com.google.code.gson:gson:2.3.1'

    // 远程依赖 V7
    compile 'com.android.support:appcompat-v7:22.1.0'

    // 依赖本地库
    // 默认类型的输出,依赖默认类型的输出库
    // 如果依赖的lib库中也配置了productFlavors,需要指定依赖哪一个类型的库才行,要不然找不到依赖的库
    // 如果依赖自定的库,就不能配置defaultPublishConfig,并且需要把publishNonDefault打开 bug?

    // debugCompile productFlavors和buildTypes只能二选一...(@﹏@)~
    compile project(':libgrable')
    // channal2依赖channal2Debug的库
//    baiduCompile project(path: ':libgrable', configuration: 'libbaiduDebug')
//    baiduCompile project(path: ':libgrable', configuration: 'libbaiduDebug')
    debugCompile project(path: ':libgrable', configuration: 'libchannalRelease')
}
